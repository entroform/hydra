import { NumberOrRange, RangeArray } from './interfaces';
export declare function snapToInterval(value: number, interval: number, origin?: number): number;
export declare function average(...values: number[]): number;
export declare function clamp(value: number, min: number, max: number): number;
export declare function clamp(value: number, range: NumberOrRange): number;
export declare function countDigits(value: number): number;
export declare function cubicBezier(t: number, p1: number, cp1: number, cp2: number, p2: number): number;
export declare function cycleNumber(value: number, range: NumberOrRange): number;
export declare function getEuclideanDistance(a: number, b: number): number;
export declare function getSign(value: number): number;
export declare function hypotenuse(x: number, y: number): number;
export declare function lerp(t: number, from: number, to: number): number;
export declare function randomNumber(range: NumberOrRange, whole?: boolean, fixed?: number): number;
export declare function reciprocal(value: number): number;
export declare function roundTo(value: number, to?: number): number;
export declare function sum(...values: number[]): number;
export declare function sumNumberArrays(...arrays: number[][]): number[];
export declare function transform(value: number, from: NumberOrRange, to: NumberOrRange, clampResult?: boolean): number;
export declare function numberIsWithin(value: number, min: number, max: number, isExclusive?: boolean): boolean;
export declare function numberIsWithin(value: number, range: NumberOrRange, isExclusive?: boolean): boolean;
export declare function getRangeFromNumberOrRange(range: NumberOrRange): RangeArray;
export declare function isNumberOrRange(thing: any): boolean;
export declare function isRangeArray(thing: any): boolean;
export declare function orderRangeArray(range: RangeArray): RangeArray;
